{"version":3,"sources":["components/Form.js","components/Section.js","components/Todo.js","components/List.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","addForm","title","completed","value","onChange","event","target","type","placeholder","Section","style","margin","background","boxShadow","color","borderRadius","children","Todo","isEditing","setIsEditing","setValue","isCompleted","setIsCompleted","autoFocus","onClick","onDoubleClick","prevState","remove","List","renderList","list","map","item","id","App","todoList","setTodoList","oldList","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80f550a8.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\n\r\nconst Form = (props) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const inputChangeHandler = (event) => {\r\n        setInputValue(event.target.value)\r\n    }\r\n\r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length <= 0 ){\r\n                return ;\r\n        }\r\n        props.addForm({title:inputValue , completed: false});\r\n        setInputValue('');\r\n    }\r\n    return (\r\n        <form  className = \"ui form\" onSubmit= {onSubmitHandler}>\r\n            <div className = \"ui grid center aligned\">\r\n                <div className=\"row\">\r\n                    <div className=\"column five wide\">\r\n                        <input \r\n                            value = {inputValue}\r\n                            onChange = {inputChangeHandler}\r\n                            type = \"text\" \r\n                            placeholder=\"Enter something to do...\"/>\r\n                    </div>\r\n                    <div className=\"column one wide\">\r\n                    <button  type = \"submit\" className = \"ui button circular icon green\" >\r\n                        <i className= \"white plus icon\" ></i>\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form ;","import React from \"react\";\r\n\r\nconst Section = (props) => {\r\n    return (\r\n        <div style = { {margin: \"50px\", background: \"#f57f17\", \r\n                        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.26)',\r\n                        color: 'white', borderRadius: '12px'\r\n                        }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Section;","import React,{useState} from \"react\";\r\n\r\n\r\nconst Todo = (props) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [value, setValue] = useState(props.title);\r\n    const [isCompleted, setIsCompleted] = useState(props.completed);\r\n\r\n    const divDoubleClickHandler = () => {\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const inputClickHandler = (event) => {\r\n        setIsEditing(false)\r\n    };\r\n\r\n    const editChangeHandler = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const compeleteClickHandler = () => {\r\n        setIsCompleted((prevState) => !prevState);\r\n    }\r\n    return (\r\n        isEditing ? \r\n        <div className = \"row\" >\r\n            <div className = \"column seven wide\">\r\n            <div className=\"ui input fluid\" > \r\n                <input\r\n                    autoFocus = {true}\r\n                    value = {value}\r\n                    onChange = {editChangeHandler}    \r\n                />\r\n            </div>\r\n            </div>\r\n            <button onClick = {inputClickHandler}  className= \"ui button circular icon green\">\r\n                        <i className=\"white check icon\"></i>\r\n            </button>\r\n        </div>\r\n         :\r\n        <div className = \"row\" >\r\n                <div className = \"column five wide\" onDoubleClick = {divDoubleClickHandler}>\r\n                    <h2 className= {\"ui header\" + (isCompleted ? \" green\" : \"white\")} >{value}</h2> \r\n                </div>\r\n\r\n                <div className = \"column one wide\" onClick={compeleteClickHandler}>\r\n                    <button className= {\"ui button circular icon\" + (isCompleted ? \" blue\" : \" green\") }>\r\n                        <i className=\"white check icon\"></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <div className = \"column one wide\">\r\n                    <button \r\n                        onClick = {props.remove}\r\n                        className= \"ui button circular icon red\">\r\n                        <i className=\"white remove icon\"></i>\r\n                    </button>\r\n                </div>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Todo ;","import React from \"react\";\r\nimport Section from \"./Section\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst List = (props) => {\r\n    const renderList = props.list.map((item) => <Todo title={item.title} \r\n                                                        completed = {item.completed}\r\n                                                        key ={item.title}\r\n                                                        remove = {(e) => props.remove(item.id)}\r\n                                                        />)\r\n    return (\r\n        <div className=\"ui grid center aligned\">\r\n            {renderList}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default List;","import React,{useState} from 'react';\r\nimport './App.css';\r\nimport Form from \"./components/Form\";\r\nimport Section from \"./components/Section\";\r\nimport List from \"./components/List\";\r\n\r\n\r\nconst appTitle = \"To-do App\";\r\n\r\nconst list = [\r\n  {id: 1 ,title: \"Test #1\" , completed: false},\r\n  {id: 2,title: \"Test #2\", completed: false},\r\n  {id: 3, title: \"Test #3\", completed: false}\r\n]\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [todoList, setTodoList] = useState(list);\r\n\r\n  const addTodo = (item) => {\r\n    setTodoList((oldList)=> [...oldList, item])\r\n  } \r\n\r\n  const removeTodo = (id) => {\r\n    setTodoList((oldList) => oldList.filter((item) => item.id !== id ));\r\n  } \r\n  return (\r\n    <div className=\"ui container center aligned\">\r\n      <Section>\r\n        <h1 className=\"header\">{appTitle}</h1>\r\n      </Section>\r\n      \r\n\r\n      <Section>\r\n        <Form addForm = {addTodo}/>\r\n      </Section>\r\n\r\n      <Section>\r\n        <List remove={removeTodo} list = {todoList}/>\r\n      </Section>\r\n    </div>\r\n  )\r\n} \r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}